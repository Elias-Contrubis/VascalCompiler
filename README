
***To run the Compiler, in the main method, which can be found in the Compiler class, insert the desired file name 
as the new Lexer parameter*****

The main components of the Compiler are as outlined:

Lexical Analyzer:
The lexical analyzer (“lexer”) is designed to isolate tokens from an input source file containing 
a program written in a language it is designed to recognise. For this project, my lexer will is designed 
to recognise tokens in 'Vascal', a custom language which is a subset of Pascal. The lexer is designed 
so that it can be accessed by the parser.

Parser:
The function of the parser is to ensure that the stream of tokens conforms to the rules of the language; 
that is, that the input is syntactically correct. It consists of three components:

1 Parser: This code calls the lexical analyser for the next token in the stream until ENDOFFILE is reached 
and manipulates the parse stack.
2 RHS Table: This contains a list of right-hand sides (productions) for all non-terminals in the Vascal grammar.
3 Parse table: This matrix is indexed by stack symbols (non-terminals and terminals) and the current symbol from
the input stream (terminals only). Each cell contains an integer value which can represent a production number
in the RHS table, an accept action, or an error.

Symbol Tables:
The symbol tables are used by the semantic actions, which are called at appropriate points in the parse to 
insert names and information associated with them (when parsing declarations) and look up names used in the 
body of the program (to see that they have been declared and are used appropriately according to the specifications 
of their declarations). The semantic actions also use information about the stage of the parse to determine whether 
an identfier is inserted into the local or global table.

Semantic Actions:
The Semanitc Action is the part of the compiler that actually generates output rather than just checking an input
against its grammar. Every time the Parser recognizes a match to a specific rule corresponding to a semantic action,
that action is called.  The uses include generating out put, reporting warnings, and managing the symbol tables.
